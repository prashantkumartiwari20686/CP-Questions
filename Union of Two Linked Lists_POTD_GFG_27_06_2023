class Solution
{
    public:
    struct Node* makeUnion(struct Node* head1, struct Node* head2)
    {
        // code here
        unordered_set<int> distinctSet;

    // Traverse the first linked list and add elements to the set
    Node* curr = head1;
    while (curr) {
        distinctSet.insert(curr->data);
        curr = curr->next;
    }

    // Traverse the second linked list and add elements to the set
    curr = head2;
    while (curr) {
        distinctSet.insert(curr->data);
        curr = curr->next;
    }

    // Convert the set into a vector and sort it
    vector<int> sortedList(distinctSet.begin(), distinctSet.end());
    sort(sortedList.begin(), sortedList.end());

    // Create a new linked list using the sorted list elements
    Node* newHead = nullptr;
    Node* tail = nullptr;
    for (int data : sortedList) {
        Node* newNode = new Node(data);
        newNode->data = data;
        newNode->next = nullptr;

        if (newHead == nullptr) {
            newHead = newNode;
            tail = newNode;
        } else {
            tail->next = newNode;
            tail = newNode;
        }
    }

    return newHead;
       
        
        
    }
};
